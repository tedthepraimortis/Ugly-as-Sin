class UaS_AI_Bootstrap : HDCoreEventHandler {
	int givenAIHandlers;

	Array<name> botClasses;
	Array<name> humanClasses;
	Array<name> otherClasses;

	override void beforeProcessCommands() {
		botClasses.clear();
		humanClasses.clear();
		otherClasses.clear();
	}

	override void processCommand(HDCoreCommand cmd) {
		switch (cmd.command) {
			case 'addFlashlightBotClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				if (botClasses.find(name) >= botClasses.size()) botClasses.push(name);

				break;
			}
			case 'removeFlashlightBotClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				let index = botClasses.find(name);
				if (index < botClasses.size()) botClasses.delete(index);

				break;
			}
			case 'clearFlashlightBotClasses': {
				botClasses.clear();
				break;
			}
			case 'addFlashlightHumanClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				if (humanClasses.find(name) >= humanClasses.size()) humanClasses.push(name);

				break;
			}
			case 'removeFlashlightHumanClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				let index = humanClasses.find(name);
				if (index < humanClasses.size()) humanClasses.delete(index);
				
				break;
			}
			case 'clearFlashlightHumanClasses': {
				humanClasses.clear();
				break;
			}
			case 'addFlashlightOtherClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				if (otherClasses.find(name) >= otherClasses.size()) otherClasses.push(name);

				break;
			}
			case 'removeFlashlightOtherClass': {
				let name = cmd.getNameParam("name");

				if (!HDCore.CheckClassExists(name)) break;

				let index = otherClasses.find(name);
				if (index < otherClasses.size()) otherClasses.delete(index);

				break;
			}
			case 'clearFlashlightOtherClasses': {
				otherClasses.clear();
				break;
			}
			default:
				break;
		}
	}

	override void afterProcessCommands() {
		if (HDCore.ShouldLog('Ugly as Sin', LOGGING_DEBUG)) {

			let msg = "Robot Classes for AI Flashlights:\n";

			forEach(cls : botClasses) msg = msg.." * "..cls.."\n";

			HDCore.Log('Ugly as Sin', LOGGING_DEBUG, msg);


			msg = "Human Classes for AI Flashlights:\n";

			forEach(cls : humanClasses) msg = msg.." * "..cls.."\n";

			HDCore.Log('Ugly as Sin', LOGGING_DEBUG, msg);


			msg = "Other Classes for AI Flashlights:\n";

			forEach(cls : otherClasses) msg = msg.." * "..cls.."\n";

			HDCore.Log('Ugly as Sin', LOGGING_DEBUG, msg);
		}
	}

	override void WorldThingSpawned(WorldEvent e) {
		if(!e.Thing) { return; }
		if(UaS.CVarCheck("UaS_AdvancedAIEnabled") && !(CVar.GetCVar("UaS_AdvancedAIEnabled").GetBool())) { return; }
		if(ExcludedClass(e.thing)) { return; }
		if(e.Thing is 'HDMobBase' || e.Thing is "HERPBot" || e.Thing is "DERPBot") {
			e.thing.GiveInventory("UaS_AI_Handler", 1);
			if(e.Thing.CountInv("UaS_AI_Handler") == 1) {
				UaS_AI_Handler givenHandler = UaS_AI_Handler(e.thing.FindInventory("UaS_AI_Handler"));
				givenHandler.score = givenAIHandlers;
				givenHandler.ProcessAI = false;
				givenHandler.RecheckAI = random[ai_proc](35, 350);
				givenAIHandlers++;
				UaS.LogDebug(DBG_AI, string.format("Gave AI tracker "..givenHandler.score.." to "..e.Thing.GetClassName()));
			}
			else { UaS.LogDebug(DBG_AI, string.format("Failed AI tracker for "..e.Thing.GetClassName())); }
		}
	}

	bool ExcludedClass(actor o) {
		return (
			o is "HDBarrel"
		);
	}

	override void WorldTick() {
		for (int i = 0; i < MAXPLAYERS; i++) {
			if (!playeringame[i]) { continue; }
			if (UaS_AI_Stealth) { Stealth_PlayerBootstrap(i); }
		}
	}

	void Stealth_PlayerBootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_StealthHandler")) {
			p.mo.Giveinventory("UaS_StealthHandler", 1);
		}
	}
}
